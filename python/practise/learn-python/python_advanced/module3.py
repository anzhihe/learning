#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
 @FileName:    module3.py
 @Function:    python模块使用
 @Author:      Zhihe An
 @Site:        https://chegva.com
 @Time:        2021/7/18
"""


"""一、搜索到的模块被编译为pyc字节码文件"""

"""
    当使用import语句导入模块时，如果模块还没有被导入，首先，解释器会按照某种路径搜索模块；其次，
    搜索到的模块可能会被编译为 pyc 字节码文件。
    
    当搜索到的模块第一次被导入时，它会被编译为 pyc 字节码文件。pyc 字节码文件存放在与该模块同目录下
    的目录 __pycache__中，其命名格式为：模块名.cpythonー版本号.pyc。这样，模块的字节码文件就被缓存起来了。
    再次加载该模块时，如果该模块没有发生变化，则无需将搜索到的模块编译为 pyc 字节码文件，
    而是直接读取缓存中的 pyc 字节码文件，从而提高加载速度
"""


"""二、运行被导入的模块"""

"""
    当使用 import 语句导入模块时，如果模块还没有被导入，首先，解释器会按照某种路径搜索模块；其次，
    搜索到的模块可能会被编译为 pyc 字节码文件；最后，执行编译生成的字节码文件从而运行模块。
    
    导入包中的模块时，会先导入包中的 __init__.py，因此，在运行被导入的模块之前，
    会从最顶层的父包开始，先依次运行所有父包中的 __init__.py。
"""


"""三、重新加载已经被导入的模块"""

"""
    使用 import 语句导入某个模块后，如果对该模块做了修改，然后再次使用 import 语句导入该模块，
    那么对模块的修改不会起任何作用。

    在交互式命令行中：
    >>> import mod
    >>> mod.v
    修改 mod.py，在交互式命令行中：
    >>> import mod
    >>> mod.v
"""

"""
    使用 import 语句导入某个模块后，如果对该模块做了修改，可以调用标准库函数 reload 重新加载已经被导入的模块。
    在交互式命令行中：
    >>> import importlib
    >>> importlib reload(mod)
    >>> mod.v
"""